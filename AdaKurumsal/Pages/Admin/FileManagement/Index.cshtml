@page "/yonetim/file-management"
@model AdaKurumsal.Pages.Admin.FileManagement.IndexModel
@{
    Layout = "~/Pages/Shared/Admin_Layout.cshtml";
}

<div class="breadcrumb-header justify-content-between">
    <div>
        <h4 class="content-title mb-2">Dosya Yönetimi</h4>
    </div>
    <div class="d-flex my-auto">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="?folderId="><i class="fas fa-home"></i> Ana Dosya</a></li>
                @foreach (var folder in Model.BreadcrumbFolders)
                {
                    <li class="breadcrumb-item">
                        <a href="?folderId=@folder.Id">@folder.Name</a>
                    </li>
                }
            </ol>
        </nav>
    </div>
</div>
<div class="row">
    <div class="col-lg-4 col-xl-3">
        <div class="card">
            <div class="main-content-left main-content-left-mail card-body">
                <a class="btn btn-primary btn-compose" data-bs-effect="effect-scale" data-bs-toggle="modal" href="#newFolderModal">
                    <i class="fe fe-folder-plus mx-2"></i> Yeni Dosya
                </a>
            </div>

        </div>
    </div>
</div>

<div class="container-fluid">

    <!-- Action Buttons -->
    <div class="row mb-3">
        <div class="col-12">

            <button class="btn btn-success" data-toggle="modal" data-target="#uploadModal">
                <i class="fas fa-upload"></i> Upload Files
            </button>
        </div>
    </div>

    <!-- Folders and Files Grid -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Files and Folders</h3>
                </div>
                <div class="card-body">
                    <!-- Folders -->
                    <div class="row mb-4">
                        @foreach (var folder in Model.Folders)
                        {
                            <div class="col-md-2 col-sm-4 mb-3">
                                <div class="folder-item">
                                    <div class="text-center">
                                        <a href="?folderId=@folder.Id" class="folder-link">
                                            <i class="fas fa-folder fa-3x text-warning"></i>
                                            <p class="mt-2 mb-0 text-truncate">@folder.Name</p>
                                        </a>
                                    </div>
                                    <div class="folder-actions">
                                        <button class="btn btn-sm btn-info" onclick="renameFolder('@folder.Id', '@folder.Name')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteFolder('@folder.Id')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Images -->
                    <div class="row">
                        @foreach (var image in Model.Images)
                        {
                            <div class="col-md-2 col-sm-4 mb-3">
                                <div class="image-item">
                                    <div class="image-preview">
                                        <img src="@image.Path" class="img-fluid" alt="@image.Name" />
                                    </div>
                                    <div class="image-info">
                                        <p class="text-truncate mb-1">@image.Name</p>
                                        <small class="text-muted">@image.CreatedDate.ToString("dd/MM/yyyy HH:mm")</small>
                                    </div>
                                    <div class="image-actions">
                                        <button class="btn btn-sm btn-info" onclick="renameImage('@image.Id', '@image.Name')">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-success" onclick="copyImagePath('@image.Path')">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteImage('@image.Id')">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- New Folder Modal -->
<div class="modal fade" id="newFolderModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form method="post" asp-page-handler="CreateFolder">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Folder</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="parentFolderId" value="@Model.FolderId" />
                    <div class="form-group">
                        <label>Folder Name</label>
                        <input type="text" class="form-control" name="folderName" required />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Upload Modal -->
<div class="modal fade" id="uploadModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" enctype="multipart/form-data" asp-page-handler="Upload">
                <div class="modal-header">
                    <h5 class="modal-title">Upload Files</h5>
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <input type="hidden" name="folderId" value="@Model.FolderId" />
                    <div class="form-group">
                        <label>Select Files</label>
                        <input type="file" class="form-control" name="files" multiple accept="image/*" required />
                    </div>
                    <div class="upload-preview mt-3">
                        <!-- Preview will be shown here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section customstyles {
    <link href="
https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.15.10/sweetalert2.css
        " rel="stylesheet">
    <style>
        .folder-item, .image-item {
            position: relative;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            transition: all 0.3s;
        }

            .folder-item:hover, .image-item:hover {
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }

        .folder-link {
            color: inherit;
            text-decoration: none;
        }

        .image-preview {
            height: 150px;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

            .image-preview img {
                max-height: 100%;
                object-fit: contain;
            }

        .folder-actions, .image-actions {
            position: absolute;
            top: 5px;
            right: 5px;
            display: none;
            background: rgba(255,255,255,0.9);
            padding: 3px;
            border-radius: 4px;
        }

        .folder-item:hover .folder-actions,
        .image-item:hover .image-actions {
            display: block;
        }
    </style>
}

@section scripts {
    <!--- Internal Sweet-Alert js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert2/11.15.10/sweetalert2.all.min.js"></script>
    <script>

         var app = angular.module('myApp', ['ngAnimate']);
        app.controller('myCtrl', function ($scope) {
        });
        function renameFolder(folderId, currentName) {
            Swal.fire({
                title: 'Dosya Yeni Adı',
                input: 'text',
                inputValue: currentName,
                showCancelButton: true,
                cancelButtonText:"İptal",
                 allowOutsideClick: true,        // Allows clicking outside to close
                 allowEscapeKey: true,
                 backdrop=false,
                inputValidator: (value) => {
                    if (!value) {
                        return 'Dosya adı boş olamaz!';
                    }
                }
            }).then((result) => {
                // First, check if the result was dismissed
                if (result.isDismissed) {
                    console.log('Modal was dismissed');
                    return; // Exit the function early
                }
                if (result.isConfirmed) {
                    fetch('?handler=RenameFolder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ folderId: folderId, newName: result.value })
                    }).then(response => {
                        if (response.ok) {
                            location.reload();
                        }
                    });
                }               
            });
        }

        function deleteFolder(folderId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This will delete the folder and all its contents!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('?handler=DeleteFolder', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ folderId: folderId })
                    }).then(response => {
                        if (response.ok) {
                            location.reload();
                        }
                    });
                }
            });
        }

        function renameImage(imageId, currentName) {
            Swal.fire({
                title: 'Rename Image',
                input: 'text',
                inputValue: currentName,
                showCancelButton: true,
                inputValidator: (value) => {
                    if (!value) {
                        return 'Image name cannot be empty!';
                    }
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('?handler=RenameImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ imageId: imageId, newName: result.value })
                    }).then(response => {
                        if (response.ok) {
                            location.reload();
                        }
                    });
                }
            });
        }

        function copyImagePath(path) {
            navigator.clipboard.writeText(path).then(() => {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: 'Path copied to clipboard!',
                    showConfirmButton: false,
                    timer: 1500
                });
            });
        }

        function deleteImage(imageId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "This image will be deleted!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    fetch('?handler=DeleteImage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ imageId: imageId })
                    }).then(response => {
                        if (response.ok) {
                            location.reload();
                        }
                    });
                }
            });
        }

        // File upload preview
        document.querySelector('input[name="files"]').addEventListener('change', function(e) {
            const preview = document.querySelector('.upload-preview');
            preview.innerHTML = '';

            [...e.target.files].forEach(file => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        preview.innerHTML += `
                            <div class="mb-2">
                                <img src="${e.target.result}" style="max-height: 100px; max-width: 100px;" class="mr-2">
                                <span>${file.name}</span>
                            </div>
                        `;
                    }
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>
}